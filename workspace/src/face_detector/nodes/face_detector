#!/usr/bin/env python

import roslib
roslib.load_manifest('opencv_proc')
import sys, os
import rospy
import cv2
import numpy as np

from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError




class ImageConverter:

    def __init__(self):

        out_topic = 'image_out'
        self.image_pub = rospy.Publisher(out_topic, Image, queue_size=5)

        self.bridge = CvBridge()
        in_topic = 'image_in'
        self.image_sub = rospy.Subscriber(in_topic, Image, self.callback)

        cascade_dir = '/home/brian/robotics_code/ROS/workspace/src/face_detector/nodes'
        cascade_fn = 'haarcascade_frontalface_alt.xml'
        cascade_path = os.path.join(cascade_dir, cascade_fn)
        # cascade_path = 'haarcascade_upperbody.xml'
        self.face_cascade = cv2.CascadeClassifier(cascade_path)




    def callback(self, data):

        # decode bgr image into a numpy array
        try:
            image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)
            return

        # transform image
        out_image = self.transform_image(image)

        # encode transformed bgr image into ROS message
        try:
            self.image_pub.publish(self.bridge.cv2_to_imgmsg(out_image, "bgr8"))
        except CvBridgeError as e:
            print(e)


    def transform_image(self, image):
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        scale = 0.25
        small_sz = (int(round(scale*gray.shape[1])), 
                    int(round(scale*gray.shape[0])))
        small_gray = cv2.resize(gray, dsize=small_sz)
        
        faces = self.face_cascade.detectMultiScale(small_gray,
                                                   scaleFactor=1.1,
                                                   minNeighbors=3,
                                                   minSize=(15, 15),
                                                   flags = cv2.CASCADE_SCALE_IMAGE
                                                   )

        rospy.loginfo('Found %i faces' % len(faces))
        
        # Draw a rectangle around the faces
        for (x, y, w, h) in faces:
            x = int(round(x/scale))
            y = int(round(y/scale))
            w = int(round(w/scale))
            h = int(round(h/scale))
            cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)

        return image


def main(args):
    rospy.init_node('face_detector')
    image_converter = ImageConverter()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")


if __name__ == '__main__':
    main(sys.argv)