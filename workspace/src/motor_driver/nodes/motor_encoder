#!/usr/bin/env python
#! /usr/bin/env python
import struct
import serial
import time

import roslib
roslib.load_manifest('motor_driver')
import rospy
from std_msgs.msg import Int16
import RPi.GPIO as GPIO


"""
The encoder node publishes a Int16 message "wheel", the tick count.

These hook into differential_drive's pid_velocity node. One of the parameters is ticks_meter, 
(ticks per meter, presumably) which should be calibrated.S
"""


class MotorEncoder:

    def __init__(self):

        rospy.init_node('motor_encoder', anonymous=False)
        pub = rospy.Publisher('tick_count', Int16, queue_size=10)
        rate = rospy.Rate(40)  # hz
        
        self.backwards = rospy.get_param('~backwards')
        white_pin = rospy.get_param('~white_pin')
        yellow_pin = rospy.get_param('~yellow_pin')

        self.tick_count = 0
        
        self.yellow_pin = yellow_pin
        self.white_pin = white_pin

        GPIO.setmode(GPIO.BOARD)
        GPIO.setup(self.yellow_pin, GPIO.IN)
        GPIO.setup(self.white_pin, GPIO.IN)

        GPIO.add_event_detect(self.yellow_pin, GPIO.BOTH, callback=self.edge_changing)
        GPIO.add_event_detect(self.white_pin, GPIO.BOTH, callback=self.edge_changing)

        # flag variables to track which channel most recently rose/fell
        self.last_rising_pin = None
        self.last_falling_pin = None

        

        while not rospy.is_shutdown():
            pub.publish(Int16(data=self.tick_count))
            rate.sleep()
        

    def edge_changing(self, pin):
        state = GPIO.input(pin)

        if state :  # rising

            # increment tick count
            if pin == self.last_falling_pin:
                self.tick_count += 1
            else:
                self.tick_count -= 1

            self.last_rising_pin = pin
            
        else:  # falling

            # # increment tick count
            # if pin == self.last_rising_pin:
            #     self.tick_count += 1
            # else:
            #     self.tick_count -= 1

            self.last_falling_pin = pin



if __name__ == '__main__':
    try:
        MotorEncoder()
    except rospy.ROSInterruptException:
        GPIO.cleanup()