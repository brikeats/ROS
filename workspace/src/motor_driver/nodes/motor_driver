#! /usr/bin/env python
import struct
import serial
import time

import roslib
roslib.load_manifest('motor_driver')
import rospy
from std_msgs.msg import Float32
from dual_mc33926_rpi import motors, MAX_SPEED

"""
The motor node to subscribes to differential_drive's "motor_cmd", which is a Float32 message.

These hook into differential_drive's pid_velocity node. One of the parameters is ticks_meter, 
(ticks per meter, presumably) which should be calibrated.

Manually send a message with "rostopic pub /motor_cmd std_msgs/Float32 <FLOAT_CMD>"
"""

class MotorDriver:

	def __init__(self):

		rospy.init_node('motor_driver', anonymous=False)

		# get parameters
		if rospy.has_param('~motor_num'):
			motor_num = rospy.get_param('~motor_num')
		else:
			motor_num = 1
		if rospy.has_param('~backwards'):
			self.backwards = rospy.get_param('~backwards')
		else:
			self.backwards = False

		# listen for commands
		rospy.Subscriber("motor_effort", Float32, self.change_speed)

		if motor_num == 1:
			self.motor = motors.motor1
		else:
			self.motor = motors.motor2

		# not sure why, this seems to be the effective limit
		self.max_speed = int(round(0.8*MAX_SPEED))
		
		self.motor.enable()
		self.motor.setSpeed(0)

		rospy.on_shutdown(self.shutdown)
		rospy.spin()


	def change_speed(self, motor_cmd):
	    
		if motor_cmd.data > 100:
			speed = self.max_speed
		elif motor_cmd.data < -100:
			speed = -self.max_speed
		else:
			speed = int(round(self.max_speed*motor_cmd.data/100))

		if self.backwards:
			speed *= -1
		
		# rospy.loginfo('Setting motor to speed %i' % speed)
		self.motor.setSpeed(speed)
		

	def shutdown(self):
		self.motor.setSpeed(0)
		self.motor.disable()



if __name__ == '__main__':

	motor_driver = MotorDriver()