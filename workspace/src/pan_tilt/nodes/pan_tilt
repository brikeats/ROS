#! /usr/bin/env python

import roslib
roslib.load_manifest('pan_tilt')
import rospy
import actionlib
from servo_driver.msg import set_anglesAction, set_anglesGoal
from servo_driver.srv import set_speed, set_accel
# TODO: set speed/accel to control behavior
from ar_track_alvar_msgs.msg import AlvarMarkers
import numpy as np
import yaml


"""
Pan-tilt node that tracks a alvar ar marker.
"""

class MarkerFollower:

    def __init__(self):

        self.pan_pin = rospy.get_param('~pan_pin', 0)
        self.tilt_pin = rospy.get_param('~tilt_pin', 1)

        tilt_calib_fn = rospy.get_param('~tilt_calib_file', '/home/brian/.ros/servo_info/tilt_servo.yaml')        
        pan_calib_fn  = rospy.get_param('~pan_calib_file', '/home/brian/.ros/servo_info/pan_servo.yaml')        
            
        self.pan_home = 1500
        self.tilt_home = 1500
        
        # blocks until services are available
        rospy.wait_for_service('set_speed')
        self.set_speed(10, 10)

        rospy.wait_for_service('set_accel')
        self.set_accel(4, 7)

        self.angle_setter = actionlib.SimpleActionClient('set_angle', set_anglesAction)
        self.angle_setter.wait_for_server()
        self.go_home()

        marker_topic = '/marker'
        self.marker_sub = rospy.Subscriber(marker_topic, AlvarMarkers, self.on_marker)


    def go_home(self):
        self.set_target(self.pan_home, self.tilt_home)
        self.pan = self.pan_home
        self.tilt = self.tilt_home
        

    def motion(self, pan_change, tilt_change):
        self.pan += pan_change
        self.tilt += tilt_change
        self.set_target(self.pan, self.tilt)


    def set_target(self, pan_target, tilt_target):
        try:
            angles = [1500 for  _ in range(6)]
            angles[self.pan_pin] = pan_target
            angles[self.tilt_pin] = tilt_target

            self.angle_setter.cancel_goal()
            goal = set_anglesGoal()
            goal.angles = angles
            self.angle_setter.send_goal(goal)

            # rospy.loginfo('set target to %i for servo %i' % (servo_num, target))
            self.pan = pan_target
            self.tilt = tilt_target
        except rospy.ServiceException, e:
            print "Target service call failed: %s" % e


    def set_speed(self, pan_speed, tilt_speed):
        try:
            set_speed_service = rospy.ServiceProxy('set_speed', set_speed)
            pan_response = set_speed_service(self.pan_pin, pan_speed)
            rospy.loginfo('set speed to %i for servo %i' % (self.pan_pin, pan_speed))
            rospy.loginfo('response: %s' % pan_response)
            tilt_response = set_speed_service(self.tilt_pin, tilt_speed)
            rospy.loginfo('set speed to %i for servo %i' % (self.tilt_pin, tilt_speed))
            rospy.loginfo('response: %s' % tilt_response)
        except rospy.ServiceException, e:
            rospy.loginfo("Speed service call failed: %s" % e)


    def set_accel(self, pan_accel, tilt_accel):
        try:
            set_accel_service = rospy.ServiceProxy('set_accel', set_accel)
            pan_response = set_accel_service(self.pan_pin, pan_accel)
            rospy.loginfo('set accel to %i for servo %i' % (self.pan_pin, pan_accel))
            rospy.loginfo('response: %s' % pan_response)
            tilt_response = set_accel_service(self.tilt_pin, tilt_accel)
            rospy.loginfo('set accel to %i for servo %i' % (self.tilt_pin, tilt_accel))
            rospy.loginfo('response: %s' % tilt_response)
        except rospy.ServiceException, e:
            rospy.loginfo("Accel service call failed: %s" % e)


    def on_marker(self, marker_msg):
        # rospy.loginfo('Pantilt got message')
        if len(marker_msg.markers) > 0:
            position = marker_msg.markers[0].pose.pose.position
            pan_err = np.arctan2(position.x, position.z)
            tilt_err = np.arctan2(position.y, position.z)

            # rospy.loginfo('Pantilt got marker!')
            rospy.loginfo('pan %.f, tilt %.f' % (np.rad2deg(pan_err), np.rad2deg(tilt_err)))

            us_per_deg = 50
            self.motion(-pan_err*us_per_deg, -tilt_err*us_per_deg)
    


if __name__ == '__main__':
    rospy.init_node('marker_follower')
    image_converter = MarkerFollower()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        image_converter.go_home()
        print("Pan-tilt shutting down")
