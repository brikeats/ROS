#! /usr/bin/env python

import roslib
roslib.load_manifest('pan_tilt')
import rospy
import actionlib
from servo_driver.msg import set_anglesAction, set_anglesGoal
from servo_driver.srv import set_speed, set_accel
# TODO: set speed/accel to control behavior
from ar_track_alvar_msgs.msg import AlvarMarkers
import numpy as np


"""
Pan-tilt node that tracks a alvar ar marker.
"""

class MarkerFollower:

    def __init__(self):

        self.pan_pin = rospy.get_param('~pan_pin', 0)
        self.tilt_pin = rospy.get_param('~tilt_pin', 1)

        # # blocks until services are available
        # rospy.wait_for_service('set_accel')
        # self.set_pan_accel(5)
        # self.set_tilt_accel(10)

        # rospy.wait_for_service('set_accel')
        # self.set_pan_speed(0)
        # self.set_tilt_speed(0)
        
        marker_topic = '/marker'
        self.marker_sub = rospy.Subscriber(marker_topic, AlvarMarkers, self.on_marker)


    def set_pan_speed(self, speed):
        self.set_servo_speed(self.pan_pin, speed)

    def set_pan_accel(self, accel):
        self.set_servo_accel(self.pan_pin, accel)

    def set_tilt_speed(self, speed):
        self.set_servo_speed(self.tilt_pin, speed)

    def set_tilt_accel(self, accel):
        self.set_servo_accel(self.tilt_pin, accel)


    def set_servo_speed(self, servo_num, speed):
        try:
            set_speed_service = rospy.ServiceProxy('set_speed', set_speed)
            response = set_speed_service(servo_num, speed)
            rospy.loginfo('set speed to %i for servo %i' % (servo_num, speed))
            rospy.loginfo('response: %s' % response)
        except rospy.ServiceException, e:
            print "Speed service call failed: %s" % e

    def set_servo_accel(self, servo_num, accel):
        try:
            set_speed_service = rospy.ServiceProxy('set_accel', set_accel)
            response = set_speed_service(servo_num, speed)
            rospy.loginfo('set accel to %i for servo %i' % (servo_num, accel))
            rospy.loginfo('response: %s' % response)
        except rospy.ServiceException, e:
            print "Accel service call failed: %s" % e


    def on_marker(self, marker_msg):
        #rospy.loginfo('Pantilt got marker!')
        if len(marker_msg.markers) > 0:
            position = marker_msg.markers[0].pose.pose.position
            pan_err = np.arctan2(position.x, position.z)
            tilt_err = np.arctan2(position.y, position.z)
            rospy.loginfo('pan %.f, tilt %.f' % (np.rad2deg(pan_err), np.rad2deg(tilt_err)))
    


if __name__ == '__main__':
    rospy.init_node('marker_follower')
    image_converter = MarkerFollower()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
