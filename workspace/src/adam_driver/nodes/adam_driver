#! /usr/bin/env python
import roslib
roslib.load_manifest('adam_driver')
import rospy
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import Range
from std_msgs.msg import Float32
import numpy as np


def logistic_curve(x, k=1):
    return 1. / (1 + np.exp(-k*x))


class DrivingMode(object):
    NORMAL = 0
    TURN_ABOUT = 1


class TurnAboutDirection(object):
    CLOCKWISE = 0
    COUNTERCLOCKWISE = 1


class AdamDriver:

    def __init__(self):

        rospy.init_node('adam_driver', anonymous=False)
        self.listener = tf.TransformListener()

        # get parameters
        # motor_num = rospy.get_param('~motor_num', 1)

        # Find the static rotation angles for all the sensors
        sensor_frames = ['front_right_ultrasonic_sensor', 'front_left_ultrasonic_sensor', 'front_center_ultrasonic_sensor', 'rear_center_ultrasonic_sensor']
        self.frame_to_sensor_direction = {}
        for frame in sensor_frames:
            now = rospy.Time(0)
            self.listener.waitForTransform(frame, "base_link", now, rospy.Duration(4.0))
            _, quaternion = self.listener.lookupTransform(frame, "base_link", now)
            theta_z = euler_from_quaternion(quaternion)[2]
            nx = np.cos(theta_z)
            ny = -np.sin(theta_z)
            self.frame_to_sensor_direction[frame] = np.array([nx, ny])
        
        # Parameters
        self.max_speed = 80.
        self.turniness = 2.  # how apt to turn when in normal mode
        self.turn_about_thresh = 0.05  # at this percent forward effort, switch to turn-about mode
        self.turn_about_speed = 0.5  # how fast to move in turn-about mode
        self.mode_to_alpha = {DrivingMode.NORMAL: 0, 
                              DrivingMode.TURN_ABOUT:0.5}  # how much to filter raw motor efforts
            
        # Initialize attributes
        self.latest_vectors = {frame: np.array([0, 0]) for frame in sensor_frames}
        self.driving_mode = DrivingMode.NORMAL
        self.turn_about_direction = TurnAboutDirection.CLOCKWISE
        self.uL_ewma = 0
        self.uR_ewma = 0

        
        # listen for commands
        fc_sub = rospy.Subscriber('/front_center_range', Range, self.on_range_measurement)
        fr_sub = rospy.Subscriber('/front_right_range', Range, self.on_range_measurement)
        fl_sub = rospy.Subscriber('/front_left_range', Range, self.on_range_measurement)
        rc_sub = rospy.Subscriber('/rear_center_range', Range, self.on_range_measurement)

        # publish motor commands
        self.left_motor_publisher = rospy.Publisher('left_motor_effort', Float32, queue_size=10)
        self.right_motor_publisher = rospy.Publisher('right_motor_effort', Float32, queue_size=10)

        rospy.on_shutdown(self.shutdown)
        rospy.spin()


    def publish_motor_commands(self, uL, uR):
        uL, uR = uL * self.max_speed, uR * self.max_speed
        # rospy.loginfo('setting motor speed to %i, %i' % (uL, uR))
        try:
            self.left_motor_publisher.publish(uL)
            self.right_motor_publisher.publish(uR)
        except AttributeError:
            rospy.loginfo('Adamdriver has no publishers!!!')

        
    def on_range_measurement(self, range_msg):
        frame = range_msg.header.frame_id
        r = range_msg.range
        try:
            n_hat = self.frame_to_sensor_direction[frame]
            range_vector = r * n_hat
            self.latest_vectors[frame] = range_vector
            self.update_effort()
        except AttributeError:
            rospy.loginfo('Adamdriver has no self.frame_to_sensor_direction!!!')


    def has_all_measurements(self):
        return True
        # return any([any(val==np.array([0, 0])) for val in self.latest_vectors.values()])


    def update_effort(self):
        if not self.has_all_measurements():
            rospy.loginfo('waiting for all measurements')
            return

        forward_forces = []
        
        for frame, (x, y) in self.latest_vectors.items():
            r = np.sqrt(x*x + y*y)
            force_r = self.reading_to_force(r)
            n_hat = self.frame_to_sensor_direction[frame]
            force_vec = force_r * n_hat
            if n_hat[1] >= 0:
                forward_forces.append(force_vec)
            
        forward_forces = np.array(forward_forces)
        net_force = self.compute_net_force(forward_forces)
        # rospy.loginfo('forward_forces %s' % forward_forces)
        rospy.loginfo('net_force %s' % net_force)
        uL, uR = self.force_to_efforts(net_force)
        rospy.loginfo('uL, uR %f, %f' % (uL, uR))
        # self.publish_motor_commands(self.uL_ewma, self.uL_ewma)
        self.publish_motor_commands(uL, uR)


    def filter_efforts(self, uL, uR):
        if uL > self.max_speed:
            uL = self.max_speed
        if uL < -self.max_speed:
            uL = -self.max_speed
        if uR > self.max_speed:
            uR = self.max_speed
        if uR < -self.max_speed:
            uR = -self.max_speed
        alpha = self.mode_to_alpha[self.driving_mode]
        self.uL_ewma = alpha * uL + (1-alpha) * self.uL_ewma
        self.uR_ewma = alpha * uR + (1-alpha) * self.uR_ewma


    def force_to_efforts(self, net_force):
        if self.driving_mode == DrivingMode.NORMAL:
            [omega, v] = net_force
            uR = (v - omega)
            uL = (v + omega)
        else:  # if self.driving_mode == DrivingMode.TURN_ABOUT
            if self.turn_about_direction == TurnAboutDirection.CLOCKWISE:
                uL, uR = self.turn_about_speed, -self.turn_about_speed
            else:
                uL, uR = -self.turn_about_speed, self.turn_about_speed
        return uL, uR


    def compute_net_force(self, forward_forces):
        if forward_forces[:,1].sum() < self.turn_about_thresh:
            self.driving_mode = DrivingMode.TURN_ABOUT
            if forward_forces[:,0].sum() > 0:
                self.turn_about_direction = TurnAboutDirection.CLOCKWISE
            else:
                self.turn_about_direction = TurnAboutDirection.COUNTERCLOCKWISE
            return None  
        else:
            self.driving_mode = DrivingMode.NORMAL
            net_force = forward_forces.mean(axis=0)
            net_force[0] *= self.turniness
            return net_force


    def reading_to_force(self, d, stopping_distance=.20, steepness=5):
        """Convert a range reading to a 'force' between -1 and 1.

        Args:
            d (float): distance reading
            stopping_distance (float): at this range reading the force is zero
            steepness (float): how quickly the effort changes as a function 
                of distance

        Using a high value of steepness will cause the robot to drive until an obstacle is close, then stop abruptly. Lower values of the steepness will cause robot to steer smoothly away from walls until it gets stuck in a corner.
        """
        force = 2*(logistic_curve(d-stopping_distance, steepness)-0.5)
        return force


    # def control_effort(readings, lambda_=10, omega0=10, scale=10):
    #     net_force = np.array([0., 0.])
    #     for phi, reading in readings.iteritems():
    #         force = reading_to_force(reading, stopping_distance=30, steepness=0.1)
    #         net_force += force * np.array([np.cos(phi), np.sin(phi)])
    #     net_force *= float(scale)

    #     # speed in robot frame
    #     v = net_force[0]
    #     omega = net_force[1] + omega0/(np.sqrt(np.sum(net_force**2)))
    #     uR = (v + lambda_*omega)/(lambda_+1)
    #     uL = (v - lambda_*omega)/(lambda_+1)
    #     return uL, uR


    def shutdown(self):
        pass


if __name__ == '__main__':

    adam_driver = AdamDriver()