#!/usr/bin/env python
from __future__ import print_function

"""
This is a lightly adapted version of the code on this page:
http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython

Put this file in package "opencv_proc" in "nodes" or "scripts" directory.
chmod +x 
and source the workspace /devel/setup.bash file.

You can then run it with:

I can start a streaming Image topic with `rosrun uvc_camera uvc_camera_node`. 
View the topics it's publishing with `rostopic list`, and see that it includes
an  Image called /image_raw. I can then start my image_flipper node with the 
command:

rosrun opencv_proc flip_image image_in:=/image_raw image_out:=/image_flipped

and it publish Images to /image_flipped.
"""

import roslib
roslib.load_manifest('opencv_proc')
import sys
import rospy
import cv2
import numpy as np

from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError




class ImageConverter:

    def __init__(self):

        out_topic = '/image_out'
        self.image_pub = rospy.Publisher(out_topic, Image, queue_size=5)

        self.bridge = CvBridge()
        in_topic = '/image_in'
        self.image_sub = rospy.Subscriber(in_topic, Image, self.callback)


    def callback(self, data):

        # decode bgr image into a numpy array
        try:
            image = self.bridge.imgmsg_to_cv2(data, "passthrough")
        except CvBridgeError as e:
            print(e)
            return

        # transform image
        out_image = self.transform_image(image)

        # encode transformed bgr image into ROS message
        try:
            self.image_pub.publish(self.bridge.cv2_to_imgmsg(out_image, "mono16"))
        except CvBridgeError as e:
            print(e)


    def transform_image(self, image):
        # print('flipping image of shape ', image.shape)
        return np.flipud(image)


def main(args):
    rospy.init_node('image_converter')
    image_converter = ImageConverter()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")


if __name__ == '__main__':
    main(sys.argv)